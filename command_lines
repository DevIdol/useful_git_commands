$ git clone <<url>>
 => github ပေါ်က project ကို ယူချင်တဲ့အခါ သုံးတယ်။

======================================================================================

$ git init 
=> git နဲ့ initialize လုပ်ပေးတာ (တစ်နည်းအားဖြင့် ကိုယ့် project ကို git နဲ့ ချိတ်ဆက်ပေးလိုက်တာ)။

===========================================================================================

$ git status 
=> git add လုပ်မယ့် file တွေကို ကြည့်တာ (OR) modified လုပ်တဲ့ file တွေ, 
အသစ်ထည့်တဲ့ new file တွေ, delete လုပ်တဲ့ file တွေကို ကြည့်လို့ရတယ်။

=====================================================================================

$ git log 
=> commit ဘယ်နှစ်ခု ရှိတယ်ဆိုတာကို check ဖို့ သုံးတယ်။

=====================================================================================

$ git branch 
=> branch တွေကို check ဖို့သုံးတယ်။

=========================================================================================

$ git branch <<newbranch>>
 => branch အသစ် create လုပ်ဖို့သုံးတယ်။(Note: branchname ကို space ခြားလို့မရဘူး)။

===========================================================================================

$ git checkout -b <<newbranch>> 
=> git branch <<newbranch>> && git checkout <<branchname>> ကို တစ်ကြောင်းထဲရေးလိုက်တာ။
=> newbranch ထဲ တစ်ခါထဲဝင်ဖို့ အတွက်သုံးတယ်။(Note: branchname ကို space ခြားလို့မရဘူး)။

===============================================================================================

$ git pull origin <<branchname>>
=> github ပေါ်က update ဖြစ်တဲ့ code တွေကို မိမိရဲ့ code နဲ့ပြန်ပေါင်းတဲ့နေရာမှာ သုံးတယ်။

===============================================================================================

$ git branch -M <<newbranchname>> 
=> branch တွေကို နာမည် change ချင်တဲ့အခါ သုံးတယ်။
(Note: branchname ကို space ခြားလို့မရဘူး)။

=============================================================================================

$ git checkout <<branch name>>
=> branch တွေကို တစ်ခုနဲ့တစ်ခု ရွှေ့ဖို့ သုံးတယ်။ 
(midified commit လုပ်ပြီးပေမယ့် first commit ကို ပြန်လိုချင်တဲ့အခါ first commit ရဲ့ commit id ကို ယူပြီး 
$ git checkout <<typed commit id>> နဲ့လည်း ပြန်ယူလို့ ရတယ်)။
Note: commit id ယူဖို့ $ git log ကို ရိုက်ပါ။

===========================================================================================

$ git checkout << second commit id>>
=> second commit ကို ကြည့်ချင်တဲ့အခါ သုံးတယ်။

=================================================================================================

$ git fetch origin && git checkout <<branchname>> 
=> github ပေါ်က branch တွေကို ကြည့်တဲ့နေရာမှာသုံးတယ်။
(တစ်နည်းအားဖြင့် github ပေါ်က modified လုပ် commit တွေကို စစ်တဲ့နေရာမှာ သုံးတယ်။)

===========================================================================================

$ git restore <<filename>>
=> commit ပေါ် မရောက်သေးတဲ့ old file တွေကို ပြန်လိုချင်တဲ့အခါ သုံးတယ်။

=======================================================================================

$ git clean -f 
=> အသစ်ထည့်တဲ့ file တွေကို ပြန် delete တဲ့ခါ သုံးတယ်။
(တစ်နည်းအားဖြင့် modified file မလုပ်ခင် အခြေနေကို ပြန်ရောက်စေတယ်)

=========================================================================

$ git clean -fd 
=> အသစ်ထည့်တဲ့ folder တွေကို ပြန် delete တဲ့ခါ သုံးတယ်။
(တစ်နည်းအားဖြင့် modified folder မလုပ်ခင် အခြေနေကို ပြန်ရောက်စေတယ်)

================================================================================

$ git reset --hard <<third commit id>>
=> commit 5 ခုရှိတယ်ဆိုရင် error တတ်နေတဲ့ 4th နဲ့ 5th commit ကို မလိုချင်တော့တဲ့အခါ သုံးတယ်။
Note: commit id ယူဖို့ $ git log ကို ရိုက်ပါ။

====================================================================================

$ git branch -D <<branchname>> 
=> branch တွေကို ဖျက်ချင်တဲ့အခါ သုံးတယ်။

===========================================================================================

$ sudo rm -rf .git 
=> ကိုယ့် project မှာ ရှိတဲ့ branch အားလုံးကို ဖျက်တာ (တစ်နည်းအားဖြင့် git ကို unintialize လုပ်လိုက်တာ)။
Note: Linux Command

================================================================================================